/*
 * JBoss, Home of Professional Open Source
 * Copyright 2007, JBoss Inc., and individual contributors as indicated
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.jboss.soa.eds.samples.quickstart.hibernateaction;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import javax.naming.InitialContext;
import org.jboss.util.naming.Util;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

/**
 * SessionFactorySingleton initializes a SessionFactory by looking it up
 * in the JNDI InitialContext.     In order for the Hibernate Interceptor
 * to work, it is very important that the same SessionFactory object is 
 * used by the ESB and the client code, so this example uses the SessionFactory
 * that the ESB has bound to JNDI.    
 * 
 * @author tcunning@redhat.com
 */
public class SessionFactorySingleton {
	private SessionFactorySingleton() {
	}

	private static final Configuration config = new Configuration();
	private static Logger logger = Logger.getLogger(SessionFactorySingleton.class);
	private static SessionFactory sf;

	private static String CONFIG_FILE = "hibernate.cfg.xml";
	private static final String HIBERNATE_JNDI = "SessionFactory";

	
	/**
	 * Return the SessionFactory, or initialize it if it is null.
	 * @return SessionFactory
	 */
	public static SessionFactory getInstance() {
		if (sf == null) {
			init();		
		}
		return sf;	
	}
	
	public static List<ProductInfo> getProductInfos() {
		
		List<ProductInfo> l = new LinkedList<ProductInfo>();
		Transaction tx = null;
		Session sess = getInstance().getCurrentSession();
		try {
			tx = sess.beginTransaction();
			
			Query query = sess.createQuery("select p from ProductInfo as p");  

			for (Iterator<ProductInfo> iter = query.iterate(); iter.hasNext(); ) { 
				l.add( iter.next() ); 
			}
			
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			
		} finally {
			if (sess.isOpen()) {
				sess.close();
			}
		}
		return l;
				
	}
	
	public static void add(String id, String symbol, String companyName) {
			if (id == null) return;
						   
						   
		   Transaction tx = null;
		   Session sess = getInstance().getCurrentSession();
		   try {
			   tx = sess.beginTransaction();
			   Product  product = new Product();
			   product.setId(Integer.parseInt(id.trim()));
			   product.setSymbol(symbol);
			   product.setCompanyName(companyName);
			   sess.save(product);
			   tx.commit();
		   } catch (Exception e) {
			   e.printStackTrace();
			   if (tx != null && tx.isActive()) {
				   tx.rollback();
			   }
		   } finally {
			   if (sess.isOpen()) {
				   sess.close();
			   }
		   }
						   
	}
	
	public static Product get(String id) {
		   
		   
		   Transaction tx = null;
		   Session sess = getInstance().getCurrentSession();
		   try {
			   tx = sess.beginTransaction();
				Object  product  = sess.load (Product.class, new Integer(id.trim()));
				if (product != null) {
					product = (Product) product;
				} else {
					System.out.println("Unable to update product: " + id.trim() + " , it was not found in the database");
					product = null;
				}
				tx.commit();
				return  (product != null ? (Product) product : null);
		   } catch (Exception e) {
			   e.printStackTrace();
			   if (tx != null && tx.isActive()) {
				   tx.rollback();
			   }
			   
		   } finally {
   
			   if (sess.isOpen()) {
				   sess.close();
			   }
		   }
		return null;		   
	}
	
	
	public static void update(String id, String symbol, String companyName) {
		   
		Product product = get(id);
		if (product == null) {
			System.out.println("Unable to update product: " + id + " company name: " + companyName + " , it was not found in the database");
			return;
		}
		if (symbol == null && companyName == null) return;

		   Transaction tx = null;
		   Session sess = getInstance().getCurrentSession();
		   try {
			   tx = sess.beginTransaction();
//				Object  product  = sess.load (Product.class, new Integer(id));
//				if (product != null) {
//					Product p = (Product) product;
					if (companyName != null) product.setCompanyName(companyName.trim());
					if (symbol != null) product.setSymbol(symbol.trim());
					sess.update(product);		
				   
				   System.out.println("Updated: " + product.toString());
//				} else {
//					System.out.println("Unable to update product: " + id + " company name: " + companyName + " , it was not found in the database");
//				}
				tx.commit();
		   } catch (Exception e) {
			   e.printStackTrace();
			   if (tx != null && tx.isActive()) {
				   tx.rollback();
			   }
		   } finally {
			   if (sess.isOpen()) {
				   sess.close();
			   }
		   }
						   
	}
	
	public static void delete(int id) {
		   
		Product product = get( String.valueOf(id));
		if (product == null) {
			System.out.println("Unable to delete product: " + id + ", it was not found in the database");
			return;
		}
		   
		   Transaction tx = null;
		   Session sess = getInstance().getCurrentSession();
		   try {
			   tx = sess.beginTransaction();
//				Object  product  = sess.load (Product.class, new Integer(id));
//				if (product != null) {
					sess.delete(product);			
					
//				} else {
//					System.out.println("Unable to delete product: " + id + ", it was not found in the database");
//				}
				tx.commit();
		   } catch (Exception e) {
			   e.printStackTrace();
			   if (tx != null && tx.isActive()) {
				   tx.rollback();
			   }
		   } finally {
			   if (sess.isOpen()) {
				   sess.close();
			   }
		   }
						   
	}

	/**
	 * Initialize the sessionFactory by grabbing it out of the JNDI 
	 * InitialContext.     It is very important that the example uses the
	 * same SessionFactory object that is initialized by the ESB Hibernate
	 * Listener because hibernate events can only be intercepted on the 
	 * SessionFactory that the interceptor is set on.    By grabbing
	 * the SessionFactory out of JNDI, we guarantee that we do that, even
	 * in the case of a .ear redeploy.
	 */
	private static synchronized void init() {
		try {
			config.configure(CONFIG_FILE);
			
			String jndiName = config.getProperty(HIBERNATE_JNDI);
			if (jndiName == null) {
				jndiName = HIBERNATE_JNDI;
			}
			
			InitialContext ic = new InitialContext();

			sf = (SessionFactory) ic.lookup(jndiName);
			if (sf != null) System.out.println("EDS-HIBERANTE: Found Session Factory in JNDI");

			
			if (sf == null) {
				
				sf = config.buildSessionFactory();
				Util.rebind(ic, jndiName, sf);
				System.out.println("EDS-HIBERANTE: ession Factory added to JNDI");
			}
				

		} catch (Exception e) {
			e.printStackTrace();	
		}
		
//		if (sf == null) {
//			logger.error("Could not find SessionFactory in JNDI - Interceptors will not work!");
//			config.configure(CONFIG_FILE);
//			sf = config.buildSessionFactory();
//		}
	}

	/**
	 * Close the sessionFactory and set the class's sessionFactory to null.
	 */
	public static void close() {
		if (sf != null) {
			sf.close();	
		}
		sf = null;
	}
}
